name: Presubmit

on:
  push:
    branches: [master]
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  end-to-end:
    name: End-to-end test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            cargo: cross
          - os: macos-15
            cargo: cargo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --locked
        if: ${{ matrix.cargo == 'cross' }}
      - name: Run e2e dev script
        run: ./scripts/e2e-example.sh

  bootstrap-installer:
    name: Build installers for release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            cargo: cross
          - os: macos-15
            cargo: cargo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.os == 'macos-15' && 'x86_64-apple-darwin' || null }}
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --locked
        if: ${{ matrix.cargo == 'cross' }}
      - name: Run release bootstrap script
        run: ./scripts/bootstrap-release.sh
      - name: Upload bootstrap installers
        uses: actions/upload-artifact@v4
        with:
          name: bootstrap-installers-${{ matrix.os }}
          path: conda-dist/installers
          if-no-files-found: error

  build-release:
    name: Build conda-dist
    needs: bootstrap-installer
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            cargo: cross
            target: x86_64-unknown-linux-musl
            platform: linux-64
          - os: ubuntu-latest
            cargo: cross
            target: aarch64-unknown-linux-musl
            platform: linux-aarch64
          - os: macos-latest
            cargo: cargo
            target: x86_64-apple-darwin
            platform: osx-64
          - os: macos-latest
            cargo: cargo
            target: aarch64-apple-darwin
            platform: osx-arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform }}
      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross --locked
        if: ${{ matrix.cargo == 'cross' }}
      - name: Download bootstrapped installers
        uses: actions/download-artifact@v4
        with:
          pattern: bootstrap-installers-*
          path: conda-dist/installers
          merge-multiple: true
      - name: Build conda-dist
        run: ${{ matrix.cargo }} build --bin conda-dist --release --locked --target ${{ matrix.target }}
      - name: Upload conda-dist
        uses: actions/upload-artifact@v4
        with:
          name: conda-dist-${{ matrix.platform }}
          path: target/${{ matrix.target }}/release/conda-dist
          if-no-files-found: error

  build-installers:
    name: Build example application installers
    needs: build-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            platform: linux-64
          - os: ubuntu-24.04-arm
            platform: linux-aarch64
          - os: macos-15
            platform: osx-arm64
          - os: macos-15-intel
            platform: osx-64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download conda-dist
        uses: actions/download-artifact@v4
        with:
          name: conda-dist-${{ matrix.platform }}
          path: release
      - name: Build example installers
        run: chmod +x release/conda-dist && release/conda-dist installer examples/bash.toml
      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: installers-built-on-${{ matrix.platform }}
          path: examples/bash-*
          if-no-files-found: error

  build-container-images:
    name: Build example container images
    needs: build-release
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - runtime: docker
          - runtime: podman
            container:
              image: quay.io/podman/stable:v5.6.2
              options: --privileged
    container: ${{ matrix.container || null }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download conda-dist
        uses: actions/download-artifact@v4
        with:
          name: conda-dist-linux-64
          path: release
      - name: Make conda-dist executable
        run: chmod +x release/conda-dist
      - name: Set up QEMU for docker
        if: ${{ matrix.runtime == 'docker' }}
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        if: ${{ matrix.runtime == 'docker' }}
        uses: docker/setup-buildx-action@v3
      - name: Build container image
        env:
          RUNTIME: ${{ matrix.runtime }}
        run: |
          mkdir -p containers
          ENGINE=$(command -v "$RUNTIME")
          OUTPUT=containers/bash-${RUNTIME}.oci.tar
          echo "OUTPUT_FILE=$OUTPUT" >> "$GITHUB_ENV"
          release/conda-dist container examples/bash.toml --engine "$ENGINE" --oci-output "$OUTPUT"
      - name: Upload container image
        uses: actions/upload-artifact@v4
        with:
          name: container-${{ matrix.runtime }}
          path: ${{ env.OUTPUT_FILE }}
          if-no-files-found: error

  test-installers:
    name: Test example application installers
    needs: build-installers
    runs-on: ${{ matrix.host.os }}
    strategy:
      matrix:
        host:
          - os: ubuntu-24.04
            platform: linux-64
          - os: ubuntu-24.04-arm
            platform: linux-aarch64
          - os: macos-15
            platform: osx-arm64
          - os: macos-15-intel
            platform: osx-64
        from:
          - linux-64
          - linux-aarch64
          - osx-arm64
          - osx-64
    steps:
      - name: Download installers
        uses: actions/download-artifact@v4
        with:
          name: installers-built-on-${{ matrix.from }}
      - name: Run installer
        run: |
          chmod +x bash-${{ matrix.host.platform }}
          ./bash-${{ matrix.host.platform }} install-dir
      - name: Test installation
        run: install-dir/bin/bash --version

  test-container-images:
    name: Test example container images
    needs: build-container-images
    strategy:
      fail-fast: false
      matrix:
        runtime: [docker, podman]
        host:
          - os: ubuntu-24.04
            arch: amd64
          - os: ubuntu-24.04-arm
            arch: arm64
        source: [docker, podman]
        include:
          - runtime: docker
          - runtime: podman
            container:
              image: quay.io/podman/stable:v5.6.2
              options: --privileged
    runs-on: ${{ matrix.host.os }}
    container: ${{ matrix.container || null }}
    steps:
      - name: Install Docker prerequisites
        if: ${{ matrix.runtime == 'docker' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo
      - name: Install Podman prerequisites
        if: ${{ matrix.runtime == 'podman' }}
        run: dnf -y install skopeo
      - name: Download container image
        uses: actions/download-artifact@v4
        with:
          name: container-${{ matrix.source }}
          path: containers
      - name: Prepare Docker image
        if: ${{ matrix.runtime == 'docker' }}
        run: |
          docker image rm -f registry.example.com/example/bash:1.0.0 || true
          skopeo copy oci-archive:containers/bash-${{ matrix.source }}.oci.tar docker-daemon:registry.example.com/example/bash:1.0.0
      - name: Prepare Podman image
        if: ${{ matrix.runtime == 'podman' }}
        run: |
          podman image rm -f registry.example.com/example/bash:1.0.0 || true
          skopeo copy oci-archive:containers/bash-${{ matrix.source }}.oci.tar containers-storage:registry.example.com/example/bash:1.0.0
      - name: Run container test
        run: ${{ matrix.runtime }} run --rm registry.example.com/example/bash:1.0.0 /opt/bash/bin/bash --version
